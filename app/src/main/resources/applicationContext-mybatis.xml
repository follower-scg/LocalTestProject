<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd">


    <context:component-scan base-package="com.sunyard">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:/comp/env/jndi/mybatis" />
    </bean> -->

    <!--<bean id="dataSourceOne" class="org.apache.commons.dbcp.BasicDataSource"-->
    <bean id="dataSourceOne" class="com.sunyard.frame.base.datasource.AESDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driver_1}"/>
        <property name="url" value="${url_1}"/>
        <property name="username" value="${username_1}"/>
        <property name="password" value="${password_1}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 连接池最大数量 -->
        <property name="maxTotal" value="${maxActive}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWaitMillis" value="${maxWait}"/>

        <property name="testOnBorrow" value="true"/>
        <!--空闲时检查连接是否可用-->
        <property name="testWhileIdle" value="true"/>
        <!--监测数据连接是否可用的sql语句-->
        <property name="validationQuery" value="${validationQuery_1}"/>
    </bean>

    <bean id="dataSourceTwo" class="com.sunyard.frame.base.datasource.AESDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driver_2}"/>
        <property name="url" value="${url_2}"/>
        <property name="username" value="${username_2}"/>
        <property name="password" value="${password_2}"/>
        <property name="initialSize" value="${initialSize}"></property>
        <property name="maxTotal" value="${maxActive}"></property>
        <property name="maxIdle" value="${maxIdle}"></property>
        <property name="minIdle" value="${minIdle}"></property>
        <property name="maxWaitMillis" value="${maxWait}"></property>
        <property name="testOnBorrow" value="true"/>
        <!--空闲时检查连接是否可用-->
        <property name="testWhileIdle" value="true"/>
        <!--监测数据连接是否可用的sql语句-->
        <property name="validationQuery" value="${validationQuery_2}"/>
    </bean>


    <!--动态过度 数据源配置-->
    <bean id="dynamicDateSource" class="com.sunyard.frame.base.osi.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="dataSourceOne" key="dataSourceOne"/>
                <entry value-ref="dataSourceTwo" key="dataSourceTwo"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceOne"/>
    </bean>

    <!-- MyBatis SqlSessionFactoryBean 配置 -->
    <bean id="sqlSessionFactory" class="com.sunyard.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDateSource"/>
        <!-- mybatis配置项 -->
        <!-- 配置databaseId属性别名 -->
        <property name="databaseIdProvider">
            <bean class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
                <property name="properties">
                    <props>
                        <prop key="DB2">db2</prop>
                        <prop key="Oracle">oracle</prop>
                        <prop key="MySQL">mysql</prop>
                    </props>
                </property>
            </bean>
        </property>
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
        <property name="plugins">
            <array>
                <!-- 分页插件配置 -->
                <bean id="paginationInterceptor" class="com.sunyard.mybatisplus.plugins.PaginationInterceptor">
                    <!-- 方言实现类 -->
                    <property name="dialectClazz"
                              value="com.sunyard.frame.base.plugins.pagination.dialects.MyDataBaseDialect"/>
                    <!-- 溢出总页数，设置最大页数-->
                    <property name="overflowCurrent" value="true"/>
                </bean>
<!--                <bean id="performanceInterceptor" class="com.sunyard.mybatisplus.plugins.PerformanceInterceptor">
                    <property name="maxTime" value="0"/>
                </bean>-->
                <bean id="performanceInterceptor" class="com.sunyard.frame.app.interceptor.SqlLogInterceptor">
                    <property name="maxTime" value="5000"/>
                </bean>
            </array>
        </property>

        <!-- 全局配置注入 -->
        <property name="globalConfig" ref="globalConfig"/>
    </bean>

    <bean id="globalConfig" class="com.sunyard.mybatisplus.entity.GlobalConfiguration">
        <!--
            AUTO->`0`("数据库ID自增")
             INPUT->`1`(用户输入ID")
            ID_WORKER->`2`("全局唯一ID")
            UUID->`3`("全局唯一ID")
            默认设置，用户可以在实体类中自定义
        -->
        <property name="idType" value="1"/>
        <!--
            MYSQL->`mysql`
            ORACLE->`oracle`
            DB2->`db2`
            H2->`h2`
            HSQL->`hsql`
            SQLITE->`sqlite`
            POSTGRE->`postgresql`
            SQLSERVER2005->`sqlserver2005`
            SQLSERVER->`sqlserver`
        -->
        <!-- 数据库类型 -->
        <property name="dbType" value="${dbType_1}"/>
        <!-- 全局表为下划线命名设置 true -->
        <property name="dbColumnUnderline" value="false"/>
        <!-- sql注入器 -->
        <property name="sqlInjector" ref="mySqlInjector"/>
    </bean>

    <!-- 获取当前数据库方言实现类 -->
    <bean id="myDataBaseDialect" class="com.sunyard.frame.base.plugins.pagination.dialects.MyDataBaseDialect">
        <!-- 方言类型 -->
        <property name="dialectType" value="${dbType_1}"/>
        <!--数据源对应的方言类型-->
        <!--
            MYSQL->`mysql`
            ORACLE->`oracle`
            DB2->`db2`
            H2->`h2`
            HSQL->`hsql`
            SQLITE->`sqlite`
            POSTGRE->`postgresql`
            SQLSERVER2005->`sqlserver2005`
            SQLSERVER->`sqlserver`
        -->
        <property name="dbsTypeMap">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="dataSourceOne" value="${dbType_1}"/>
                <entry key="dataSourceTwo" value="${dbType_2}"/>
            </map>
        </property>
    </bean>

    <!-- 加载 mapper.xml 接口 配置文件 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sunyard.*.*.dao,com.sunyard.frame.workflow.*.dao"/>
    </bean>

    <bean id="mySqlInjector" class="com.sunyard.frame.base.injector.MyAutoSqlInjector">
    </bean>


    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <!--
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sunyard.web.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    -->
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDateSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="count*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="is*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="has*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="importDate" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="logTranslationValue" propagation="NOT_SUPPORTED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="serviceMethods"
                      expression="execution(* com.sunyard.*.*.service.*Service.*(..))
			||execution(* com.sunyard.*.*.service.*.*Service.*(..))
			||execution(* com.sunyard.frame.workflow.*.service.*Service.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>

    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <!-- 创建一个sqlSession实例，线程安全的，可以在所有DAO实例共享，原理是将sqlSession，事务与当前线程挂钩 -->
    <bean name="sqlSessionTemplateASS" id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!--
    <bean id="logProcess" class="com.sunyard.web.log.LogProcess"
        init-method="init">
        <property name="logThreadNum" value="1" />
    </bean>
    -->
</beans>